// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FkPbValue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FkPbValue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FkPbValue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FkPbValue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FkPbValue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FkPbValue_2eproto;
namespace com {
namespace alimin {
namespace fk {
namespace pb {
class FkPbValue;
struct FkPbValueDefaultTypeInternal;
extern FkPbValueDefaultTypeInternal _FkPbValue_default_instance_;
}  // namespace pb
}  // namespace fk
}  // namespace alimin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::alimin::fk::pb::FkPbValue* Arena::CreateMaybeMessage<::com::alimin::fk::pb::FkPbValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace alimin {
namespace fk {
namespace pb {

// ===================================================================

class FkPbValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.alimin.fk.pb.FkPbValue) */ {
 public:
  inline FkPbValue() : FkPbValue(nullptr) {}
  ~FkPbValue() override;
  explicit constexpr FkPbValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FkPbValue(const FkPbValue& from);
  FkPbValue(FkPbValue&& from) noexcept
    : FkPbValue() {
    *this = ::std::move(from);
  }

  inline FkPbValue& operator=(const FkPbValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline FkPbValue& operator=(FkPbValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FkPbValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const FkPbValue* internal_default_instance() {
    return reinterpret_cast<const FkPbValue*>(
               &_FkPbValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FkPbValue& a, FkPbValue& b) {
    a.Swap(&b);
  }
  inline void Swap(FkPbValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FkPbValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FkPbValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FkPbValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FkPbValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FkPbValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FkPbValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.alimin.fk.pb.FkPbValue";
  }
  protected:
  explicit FkPbValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrValFieldNumber = 5,
    kInt64ValFieldNumber = 2,
    kInt32ValFieldNumber = 1,
    kFloatValFieldNumber = 3,
    kDoubleValFieldNumber = 4,
  };
  // string strVal = 5;
  void clear_strval();
  const std::string& strval() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strval(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strval();
  PROTOBUF_NODISCARD std::string* release_strval();
  void set_allocated_strval(std::string* strval);
  private:
  const std::string& _internal_strval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strval(const std::string& value);
  std::string* _internal_mutable_strval();
  public:

  // int64 int64Val = 2;
  void clear_int64val();
  int64_t int64val() const;
  void set_int64val(int64_t value);
  private:
  int64_t _internal_int64val() const;
  void _internal_set_int64val(int64_t value);
  public:

  // int32 int32Val = 1;
  void clear_int32val();
  int32_t int32val() const;
  void set_int32val(int32_t value);
  private:
  int32_t _internal_int32val() const;
  void _internal_set_int32val(int32_t value);
  public:

  // float floatVal = 3;
  void clear_floatval();
  float floatval() const;
  void set_floatval(float value);
  private:
  float _internal_floatval() const;
  void _internal_set_floatval(float value);
  public:

  // double doubleVal = 4;
  void clear_doubleval();
  double doubleval() const;
  void set_doubleval(double value);
  private:
  double _internal_doubleval() const;
  void _internal_set_doubleval(double value);
  public:

  // @@protoc_insertion_point(class_scope:com.alimin.fk.pb.FkPbValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strval_;
  int64_t int64val_;
  int32_t int32val_;
  float floatval_;
  double doubleval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FkPbValue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FkPbValue

// int32 int32Val = 1;
inline void FkPbValue::clear_int32val() {
  int32val_ = 0;
}
inline int32_t FkPbValue::_internal_int32val() const {
  return int32val_;
}
inline int32_t FkPbValue::int32val() const {
  // @@protoc_insertion_point(field_get:com.alimin.fk.pb.FkPbValue.int32Val)
  return _internal_int32val();
}
inline void FkPbValue::_internal_set_int32val(int32_t value) {
  
  int32val_ = value;
}
inline void FkPbValue::set_int32val(int32_t value) {
  _internal_set_int32val(value);
  // @@protoc_insertion_point(field_set:com.alimin.fk.pb.FkPbValue.int32Val)
}

// int64 int64Val = 2;
inline void FkPbValue::clear_int64val() {
  int64val_ = int64_t{0};
}
inline int64_t FkPbValue::_internal_int64val() const {
  return int64val_;
}
inline int64_t FkPbValue::int64val() const {
  // @@protoc_insertion_point(field_get:com.alimin.fk.pb.FkPbValue.int64Val)
  return _internal_int64val();
}
inline void FkPbValue::_internal_set_int64val(int64_t value) {
  
  int64val_ = value;
}
inline void FkPbValue::set_int64val(int64_t value) {
  _internal_set_int64val(value);
  // @@protoc_insertion_point(field_set:com.alimin.fk.pb.FkPbValue.int64Val)
}

// float floatVal = 3;
inline void FkPbValue::clear_floatval() {
  floatval_ = 0;
}
inline float FkPbValue::_internal_floatval() const {
  return floatval_;
}
inline float FkPbValue::floatval() const {
  // @@protoc_insertion_point(field_get:com.alimin.fk.pb.FkPbValue.floatVal)
  return _internal_floatval();
}
inline void FkPbValue::_internal_set_floatval(float value) {
  
  floatval_ = value;
}
inline void FkPbValue::set_floatval(float value) {
  _internal_set_floatval(value);
  // @@protoc_insertion_point(field_set:com.alimin.fk.pb.FkPbValue.floatVal)
}

// double doubleVal = 4;
inline void FkPbValue::clear_doubleval() {
  doubleval_ = 0;
}
inline double FkPbValue::_internal_doubleval() const {
  return doubleval_;
}
inline double FkPbValue::doubleval() const {
  // @@protoc_insertion_point(field_get:com.alimin.fk.pb.FkPbValue.doubleVal)
  return _internal_doubleval();
}
inline void FkPbValue::_internal_set_doubleval(double value) {
  
  doubleval_ = value;
}
inline void FkPbValue::set_doubleval(double value) {
  _internal_set_doubleval(value);
  // @@protoc_insertion_point(field_set:com.alimin.fk.pb.FkPbValue.doubleVal)
}

// string strVal = 5;
inline void FkPbValue::clear_strval() {
  strval_.ClearToEmpty();
}
inline const std::string& FkPbValue::strval() const {
  // @@protoc_insertion_point(field_get:com.alimin.fk.pb.FkPbValue.strVal)
  return _internal_strval();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FkPbValue::set_strval(ArgT0&& arg0, ArgT... args) {
 
 strval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alimin.fk.pb.FkPbValue.strVal)
}
inline std::string* FkPbValue::mutable_strval() {
  std::string* _s = _internal_mutable_strval();
  // @@protoc_insertion_point(field_mutable:com.alimin.fk.pb.FkPbValue.strVal)
  return _s;
}
inline const std::string& FkPbValue::_internal_strval() const {
  return strval_.Get();
}
inline void FkPbValue::_internal_set_strval(const std::string& value) {
  
  strval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FkPbValue::_internal_mutable_strval() {
  
  return strval_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FkPbValue::release_strval() {
  // @@protoc_insertion_point(field_release:com.alimin.fk.pb.FkPbValue.strVal)
  return strval_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FkPbValue::set_allocated_strval(std::string* strval) {
  if (strval != nullptr) {
    
  } else {
    
  }
  strval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strval,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strval_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alimin.fk.pb.FkPbValue.strVal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace fk
}  // namespace alimin
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FkPbValue_2eproto
