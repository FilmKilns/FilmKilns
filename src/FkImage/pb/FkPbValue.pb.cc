// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FkPbValue.proto

#include "FkPbValue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace com {
namespace alimin {
namespace fk {
namespace pb {
constexpr FkPbValue::FkPbValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strval_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , int64val_(int64_t{0})
  , int32val_(0)
  , floatval_(0)
  , doubleval_(0){}
struct FkPbValueDefaultTypeInternal {
  constexpr FkPbValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FkPbValueDefaultTypeInternal() {}
  union {
    FkPbValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FkPbValueDefaultTypeInternal _FkPbValue_default_instance_;
}  // namespace pb
}  // namespace fk
}  // namespace alimin
}  // namespace com
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FkPbValue_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_FkPbValue_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FkPbValue_2eproto = nullptr;

const uint32_t TableStruct_FkPbValue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkPbValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkPbValue, int32val_),
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkPbValue, int64val_),
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkPbValue, floatval_),
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkPbValue, doubleval_),
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkPbValue, strval_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::alimin::fk::pb::FkPbValue)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::alimin::fk::pb::_FkPbValue_default_instance_),
};

const char descriptor_table_protodef_FkPbValue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017FkPbValue.proto\022\020com.alimin.fk.pb\"d\n\tF"
  "kPbValue\022\020\n\010int32Val\030\001 \001(\005\022\020\n\010int64Val\030\002"
  " \001(\003\022\020\n\010floatVal\030\003 \001(\002\022\021\n\tdoubleVal\030\004 \001("
  "\001\022\016\n\006strVal\030\005 \001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FkPbValue_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FkPbValue_2eproto = {
  false, false, 145, descriptor_table_protodef_FkPbValue_2eproto, "FkPbValue.proto", 
  &descriptor_table_FkPbValue_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_FkPbValue_2eproto::offsets,
  file_level_metadata_FkPbValue_2eproto, file_level_enum_descriptors_FkPbValue_2eproto, file_level_service_descriptors_FkPbValue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_FkPbValue_2eproto_getter() {
  return &descriptor_table_FkPbValue_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_FkPbValue_2eproto(&descriptor_table_FkPbValue_2eproto);
namespace com {
namespace alimin {
namespace fk {
namespace pb {

// ===================================================================

class FkPbValue::_Internal {
 public:
};

FkPbValue::FkPbValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.alimin.fk.pb.FkPbValue)
}
FkPbValue::FkPbValue(const FkPbValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strval().empty()) {
    strval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strval(), 
      GetArenaForAllocation());
  }
  ::memcpy(&int64val_, &from.int64val_,
    static_cast<size_t>(reinterpret_cast<char*>(&doubleval_) -
    reinterpret_cast<char*>(&int64val_)) + sizeof(doubleval_));
  // @@protoc_insertion_point(copy_constructor:com.alimin.fk.pb.FkPbValue)
}

inline void FkPbValue::SharedCtor() {
strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&int64val_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&doubleval_) -
    reinterpret_cast<char*>(&int64val_)) + sizeof(doubleval_));
}

FkPbValue::~FkPbValue() {
  // @@protoc_insertion_point(destructor:com.alimin.fk.pb.FkPbValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FkPbValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FkPbValue::ArenaDtor(void* object) {
  FkPbValue* _this = reinterpret_cast< FkPbValue* >(object);
  (void)_this;
}
void FkPbValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FkPbValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FkPbValue::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alimin.fk.pb.FkPbValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strval_.ClearToEmpty();
  ::memset(&int64val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doubleval_) -
      reinterpret_cast<char*>(&int64val_)) + sizeof(doubleval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FkPbValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 int32Val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          int32val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int64Val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          int64val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float floatVal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          floatval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double doubleVal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          doubleval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string strVal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_strval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.alimin.fk.pb.FkPbValue.strVal"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FkPbValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alimin.fk.pb.FkPbValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 int32Val = 1;
  if (this->_internal_int32val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_int32val(), target);
  }

  // int64 int64Val = 2;
  if (this->_internal_int64val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_int64val(), target);
  }

  // float floatVal = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_floatval = this->_internal_floatval();
  uint32_t raw_floatval;
  memcpy(&raw_floatval, &tmp_floatval, sizeof(tmp_floatval));
  if (raw_floatval != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_floatval(), target);
  }

  // double doubleVal = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_doubleval = this->_internal_doubleval();
  uint64_t raw_doubleval;
  memcpy(&raw_doubleval, &tmp_doubleval, sizeof(tmp_doubleval));
  if (raw_doubleval != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_doubleval(), target);
  }

  // string strVal = 5;
  if (!this->_internal_strval().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strval().data(), static_cast<int>(this->_internal_strval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.alimin.fk.pb.FkPbValue.strVal");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alimin.fk.pb.FkPbValue)
  return target;
}

size_t FkPbValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alimin.fk.pb.FkPbValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strVal = 5;
  if (!this->_internal_strval().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strval());
  }

  // int64 int64Val = 2;
  if (this->_internal_int64val() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_int64val());
  }

  // int32 int32Val = 1;
  if (this->_internal_int32val() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_int32val());
  }

  // float floatVal = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_floatval = this->_internal_floatval();
  uint32_t raw_floatval;
  memcpy(&raw_floatval, &tmp_floatval, sizeof(tmp_floatval));
  if (raw_floatval != 0) {
    total_size += 1 + 4;
  }

  // double doubleVal = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_doubleval = this->_internal_doubleval();
  uint64_t raw_doubleval;
  memcpy(&raw_doubleval, &tmp_doubleval, sizeof(tmp_doubleval));
  if (raw_doubleval != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FkPbValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FkPbValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FkPbValue::GetClassData() const { return &_class_data_; }

void FkPbValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FkPbValue *>(to)->MergeFrom(
      static_cast<const FkPbValue &>(from));
}


void FkPbValue::MergeFrom(const FkPbValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.alimin.fk.pb.FkPbValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strval().empty()) {
    _internal_set_strval(from._internal_strval());
  }
  if (from._internal_int64val() != 0) {
    _internal_set_int64val(from._internal_int64val());
  }
  if (from._internal_int32val() != 0) {
    _internal_set_int32val(from._internal_int32val());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_floatval = from._internal_floatval();
  uint32_t raw_floatval;
  memcpy(&raw_floatval, &tmp_floatval, sizeof(tmp_floatval));
  if (raw_floatval != 0) {
    _internal_set_floatval(from._internal_floatval());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_doubleval = from._internal_doubleval();
  uint64_t raw_doubleval;
  memcpy(&raw_doubleval, &tmp_doubleval, sizeof(tmp_doubleval));
  if (raw_doubleval != 0) {
    _internal_set_doubleval(from._internal_doubleval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FkPbValue::CopyFrom(const FkPbValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alimin.fk.pb.FkPbValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FkPbValue::IsInitialized() const {
  return true;
}

void FkPbValue::InternalSwap(FkPbValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strval_, lhs_arena,
      &other->strval_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FkPbValue, doubleval_)
      + sizeof(FkPbValue::doubleval_)
      - PROTOBUF_FIELD_OFFSET(FkPbValue, int64val_)>(
          reinterpret_cast<char*>(&int64val_),
          reinterpret_cast<char*>(&other->int64val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FkPbValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FkPbValue_2eproto_getter, &descriptor_table_FkPbValue_2eproto_once,
      file_level_metadata_FkPbValue_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace fk
}  // namespace alimin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::alimin::fk::pb::FkPbValue* Arena::CreateMaybeMessage< ::com::alimin::fk::pb::FkPbValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alimin::fk::pb::FkPbValue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
