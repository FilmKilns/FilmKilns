// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FkValueMap.proto

#include "FkValueMap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace com {
namespace alimin {
namespace fk {
namespace pb {
constexpr FkValueMap_ValueEntry_DoNotUse::FkValueMap_ValueEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FkValueMap_ValueEntry_DoNotUseDefaultTypeInternal {
  constexpr FkValueMap_ValueEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FkValueMap_ValueEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FkValueMap_ValueEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FkValueMap_ValueEntry_DoNotUseDefaultTypeInternal _FkValueMap_ValueEntry_DoNotUse_default_instance_;
constexpr FkValueMap::FkValueMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct FkValueMapDefaultTypeInternal {
  constexpr FkValueMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FkValueMapDefaultTypeInternal() {}
  union {
    FkValueMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FkValueMapDefaultTypeInternal _FkValueMap_default_instance_;
}  // namespace pb
}  // namespace fk
}  // namespace alimin
}  // namespace com
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FkValueMap_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_FkValueMap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FkValueMap_2eproto = nullptr;

const uint32_t TableStruct_FkValueMap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkValueMap_ValueEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkValueMap_ValueEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkValueMap_ValueEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkValueMap_ValueEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkValueMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::alimin::fk::pb::FkValueMap, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::com::alimin::fk::pb::FkValueMap_ValueEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::com::alimin::fk::pb::FkValueMap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::alimin::fk::pb::_FkValueMap_ValueEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::alimin::fk::pb::_FkValueMap_default_instance_),
};

const char descriptor_table_protodef_FkValueMap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020FkValueMap.proto\022\020com.alimin.fk.pb\032\017Fk"
  "PbValue.proto\"\217\001\n\nFkValueMap\0226\n\005value\030\001 "
  "\003(\0132\'.com.alimin.fk.pb.FkValueMap.ValueE"
  "ntry\032I\n\nValueEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value"
  "\030\002 \001(\0132\033.com.alimin.fk.pb.FkPbValue:\0028\001b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_FkValueMap_2eproto_deps[1] = {
  &::descriptor_table_FkPbValue_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FkValueMap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FkValueMap_2eproto = {
  false, false, 207, descriptor_table_protodef_FkValueMap_2eproto, "FkValueMap.proto", 
  &descriptor_table_FkValueMap_2eproto_once, descriptor_table_FkValueMap_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_FkValueMap_2eproto::offsets,
  file_level_metadata_FkValueMap_2eproto, file_level_enum_descriptors_FkValueMap_2eproto, file_level_service_descriptors_FkValueMap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_FkValueMap_2eproto_getter() {
  return &descriptor_table_FkValueMap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_FkValueMap_2eproto(&descriptor_table_FkValueMap_2eproto);
namespace com {
namespace alimin {
namespace fk {
namespace pb {

// ===================================================================

FkValueMap_ValueEntry_DoNotUse::FkValueMap_ValueEntry_DoNotUse() {}
FkValueMap_ValueEntry_DoNotUse::FkValueMap_ValueEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FkValueMap_ValueEntry_DoNotUse::MergeFrom(const FkValueMap_ValueEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FkValueMap_ValueEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FkValueMap_2eproto_getter, &descriptor_table_FkValueMap_2eproto_once,
      file_level_metadata_FkValueMap_2eproto[0]);
}

// ===================================================================

class FkValueMap::_Internal {
 public:
};

void FkValueMap::clear_value() {
  value_.Clear();
}
FkValueMap::FkValueMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.alimin.fk.pb.FkValueMap)
}
FkValueMap::FkValueMap(const FkValueMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.MergeFrom(from.value_);
  // @@protoc_insertion_point(copy_constructor:com.alimin.fk.pb.FkValueMap)
}

inline void FkValueMap::SharedCtor() {
}

FkValueMap::~FkValueMap() {
  // @@protoc_insertion_point(destructor:com.alimin.fk.pb.FkValueMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FkValueMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FkValueMap::ArenaDtor(void* object) {
  FkValueMap* _this = reinterpret_cast< FkValueMap* >(object);
  (void)_this;
  _this->value_. ~MapField();
}
inline void FkValueMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &FkValueMap::ArenaDtor);
  }
}
void FkValueMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FkValueMap::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alimin.fk.pb.FkValueMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FkValueMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .com.alimin.fk.pb.FkPbValue> value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&value_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FkValueMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alimin.fk.pb.FkValueMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .com.alimin.fk.pb.FkPbValue> value = 1;
  if (!this->_internal_value().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::alimin::fk::pb::FkPbValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "com.alimin.fk.pb.FkValueMap.ValueEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_value().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_value().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::alimin::fk::pb::FkPbValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::alimin::fk::pb::FkPbValue >::const_iterator
          it = this->_internal_value().begin();
          it != this->_internal_value().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FkValueMap_ValueEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::alimin::fk::pb::FkPbValue >::const_iterator
          it = this->_internal_value().begin();
          it != this->_internal_value().end(); ++it) {
        target = FkValueMap_ValueEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alimin.fk.pb.FkValueMap)
  return target;
}

size_t FkValueMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alimin.fk.pb.FkValueMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .com.alimin.fk.pb.FkPbValue> value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_value_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::alimin::fk::pb::FkPbValue >::const_iterator
      it = this->_internal_value().begin();
      it != this->_internal_value().end(); ++it) {
    total_size += FkValueMap_ValueEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FkValueMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FkValueMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FkValueMap::GetClassData() const { return &_class_data_; }

void FkValueMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FkValueMap *>(to)->MergeFrom(
      static_cast<const FkValueMap &>(from));
}


void FkValueMap::MergeFrom(const FkValueMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.alimin.fk.pb.FkValueMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FkValueMap::CopyFrom(const FkValueMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alimin.fk.pb.FkValueMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FkValueMap::IsInitialized() const {
  return true;
}

void FkValueMap::InternalSwap(FkValueMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FkValueMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FkValueMap_2eproto_getter, &descriptor_table_FkValueMap_2eproto_once,
      file_level_metadata_FkValueMap_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace fk
}  // namespace alimin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::alimin::fk::pb::FkValueMap_ValueEntry_DoNotUse* Arena::CreateMaybeMessage< ::com::alimin::fk::pb::FkValueMap_ValueEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alimin::fk::pb::FkValueMap_ValueEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alimin::fk::pb::FkValueMap* Arena::CreateMaybeMessage< ::com::alimin::fk::pb::FkValueMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alimin::fk::pb::FkValueMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
